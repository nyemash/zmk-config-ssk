#include <dt-bindings/zmk/matrix_transform.h>

&pinctrl {
	spi0_default: spi0_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
				<NRF_PSEL(SPIM_MOSI, 0, 10)>,
				<NRF_PSEL(SPIM_MISO, 1, 11)>;
		};
	};

	spi0_sleep: spi0_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
				<NRF_PSEL(SPIM_MOSI, 0, 10)>,
				<NRF_PSEL(SPIM_MISO, 1, 11)>;
			low-power-enable;
		};
	};
};

&spi0 {
	status = "okay";
	cs-gpios = <&pro_micro 10 GPIO_ACTIVE_LOW>;
	pinctrl-0 = <&spi0_default>;
	pinctrl-1 = <&spi0_sleep>;
	pinctrl-names = "default", "sleep";
	 
	shifter: 595@0 {
		compatible = "zmk,gpio-595";
		status = "okay";
		gpio-controller;
		spi-max-frequency = <200000>;
		reg = <0>;
		label = "4HC595";
		#gpio-cells = <2>;
		ngpios = <8>;
	};
};

/ {
    chosen {
        zmk,kscan = &default_kscan;
		zmk,matrix_transform = &default_transform;		
    };

default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "default_kscan";
        diode-direction = "col2row";

        col-gpios
            = <&pro_micro 8 GPIO_ACTIVE_HIGH>
            , <&pro_micro 9 GPIO_ACTIVE_HIGH>
            , <&gpio1 1 GPIO_ACTIVE_HIGH>
            , <&gpio1 2 GPIO_ACTIVE_HIGH>
            , <&gpio1 7 GPIO_ACTIVE_HIGH>     
			, <&shifter 1 GPIO_ACTIVE_HIGH>
			, <&shifter 2 GPIO_ACTIVE_HIGH>
			, <&shifter 3 GPIO_ACTIVE_HIGH>
			, <&shifter 4 GPIO_ACTIVE_HIGH>
			, <&shifter 5 GPIO_ACTIVE_HIGH>
			, <&shifter 6 GPIO_ACTIVE_HIGH>
			, <&shifter 7 GPIO_ACTIVE_HIGH>
            , <&pro_micro 18 GPIO_ACTIVE_HIGH>
            , <&pro_micro 19 GPIO_ACTIVE_HIGH>   
            , <&pro_micro 20 GPIO_ACTIVE_HIGH>
            , <&pro_micro 21 GPIO_ACTIVE_HIGH> 
            ;

        row-gpios
            = <&pro_micro 1 GPIO_ACTIVE_HIGH> 
            , <&pro_micro 0 GPIO_ACTIVE_HIGH>
            , <&pro_micro 2 GPIO_ACTIVE_HIGH>
            , <&pro_micro 3 GPIO_ACTIVE_HIGH>
            , <&pro_micro 4 GPIO_ACTIVE_HIGH>
            , <&pro_micro 5 GPIO_ACTIVE_HIGH>
            , <&pro_micro 6 GPIO_ACTIVE_HIGH>
            , <&pro_micro 7 GPIO_ACTIVE_HIGH>            
            ;
    };

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <16>;
		rows = <84>;
	
		map = <
			RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,9) RC(0,A) RC(0,B) RC(0,C) RC(0,D) RC(0,E) RC(0,F) RC(0,G)
			RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,9) RC(1,A) RC(1,B) RC(1,C) RC(1,D) RC(1,E) RC(1,F) RC(1,G)
			RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,9) RC(2,A) RC(2,B) RC(2,C) RC(2,D) RC(2,E) RC(2,F) RC(2,G)
			RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,9) RC(3,A) RC(3,B) RC(3,C) RC(3,D) RC(3,E) RC(3,F) RC(3,G)
			RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7) RC(4,9) RC(4,A) RC(4,B) RC(4,C) RC(4,D) RC(4,E) RC(4,F) RC(4,G)
			RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5) RC(5,6) RC(5,7) RC(5,9) RC(5,A) RC(5,B) RC(5,C) RC(5,D) RC(5,E) RC(5,F) RC(5,G)
			RC(6,0) RC(6,1) RC(6,2) RC(6,3) RC(6,4) RC(6,5) RC(6,6) RC(6,7) RC(6,9) RC(6,A) RC(6,B) RC(6,C) RC(6,D) RC(6,E) RC(6,F) RC(6,G)
			RC(7,0) RC(7,1) RC(7,2) RC(7,3) RC(7,4) RC(7,5) RC(7,6) RC(7,7) RC(7,9) RC(7,A) RC(7,B) RC(7,C) RC(7,D) RC(7,E) RC(7,F) RC(7,G)
		>;
	};	
 
};